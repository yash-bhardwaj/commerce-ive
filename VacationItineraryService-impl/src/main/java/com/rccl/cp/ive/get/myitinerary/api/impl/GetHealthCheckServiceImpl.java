package com.rccl.cp.ive.get.myitinerary.api.impl;

import java.util.concurrent.CompletableFuture;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Session;
import com.google.inject.Inject;
import com.lightbend.lagom.javadsl.api.ServiceCall;
import com.lightbend.lagom.javadsl.api.deser.ExceptionMessage;
import com.lightbend.lagom.javadsl.api.transport.BadRequest;
import com.lightbend.lagom.javadsl.api.transport.TransportErrorCode;
import com.lightbend.lagom.javadsl.persistence.cassandra.CassandraSession;
import com.rccl.cp.ive.get.myitinerary.api.GetHealthCheckService;

import akka.NotUsed;

public class GetHealthCheckServiceImpl implements GetHealthCheckService {

    private final CassandraSession session;

    private static Logger logger = LoggerFactory.getLogger(GetHealthCheckServiceImpl.class);

    @Inject
    public GetHealthCheckServiceImpl(CassandraSession session) {
        // TODO Auto-generated constructor stub
        this.session = session;
    }

    @Override
    public final ServiceCall<NotUsed, String> getMyHealthCheck() {
        // TODO Autogenerated method stub
        /*
         * return request -> CompletableFuture .completedFuture(
         * "/api/v1/myItineraries/health service is up...");
         */

        return request -> {
            Session sess;
            try {
                sess = session.underlying().toCompletableFuture().get();
                ResultSet resultSet =
                    sess.execute("SELECT * FROM system_schema.keyspaces where keyspace_name='guest_calendar'");

                if (resultSet.all().size() == 0) {
                    logger.error("cassandra keyspace guest_calendar not exist");
                    throw new BadRequest(TransportErrorCode.InternalServerError,
                        new ExceptionMessage("error", "datastore keyspace not exist"));
                }

            } catch (Exception e) {
                logger.error("cassandra healtcheck exception", e);
                throw new BadRequest(TransportErrorCode.InternalServerError,
                    new ExceptionMessage("error", "datastore exception"));
            }

            return CompletableFuture
                .completedFuture(
                    "{\"name\":\"success\",\"detail\":\"up and running fine\"}");
        };
    }

}
