<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.rccl.cp</groupId>
	<artifactId>commerce-ive-poc</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<packaging>pom</packaging>

	<modules>
		<module>VacationItineraryService-api</module>
		<module>VacationItineraryService-impl</module>
		<module>VacationItineraryStream-api</module>
		<module>VacationItineraryStream-impl</module>
		<module>integration-tests</module>
		<module>gatling-tests</module>
		<module>cassandra-config</module>
	</modules>

	<pluginRepositories>
		<pluginRepository>
			<id>mesosphere-repo</id>
			<name>Mesosphere Repo</name>
			<url>http://downloads.mesosphere.io/maven</url>
		</pluginRepository>
	</pluginRepositories>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.6</version>
			</plugin>
			<plugin>
				<groupId>com.lightbend.lagom</groupId>
				<artifactId>lagom-maven-plugin</artifactId>
				<version>${lagom.version}</version>
				<configuration>
					<cassandraCleanOnStart>false</cassandraCleanOnStart>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<compilerArgs>
						<arg>-parameters</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.4.1</version>
				<executions>
					<execution>
						<id>enforce-maven-version</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<!-- Lagom requires at least Maven version 3.2.1 -->
								<requireMavenVersion>
									<version>[3.2.1,)</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- CheckStyle -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle.version}</version>
				<configuration>
					<consoleOutput>true</consoleOutput>
					<failsOnError>false</failsOnError>
					<linkXRef>false</linkXRef>
					<failOnViolation>false</failOnViolation>
					<includeTestSourceDirectory>false</includeTestSourceDirectory>
					<sourceDirectory>${basedir}/src/main/java</sourceDirectory>
					<testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>
					<outputFile>${basedir}/target/checkstyle-output.xml</outputFile>
					<configLocation>${main.basedir}/custom_checkstyle.xml</configLocation>
					<propertyExpansion>suppressions.file=${main.basedir}/checkstyle_suppressions.xml</propertyExpansion>
					<suppressionsFile>${main.basedir}/checkstyle_suppressions.xml</suppressionsFile>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- CheckStyle -->
			<!-- FindBugs -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.1</version>
				<configuration>
					<!-- findbugs:help -Ddetail=true for outputDirectory: Location where 
						generated html will be created. <outputDirectory>${project.build.directory}/findbugs</outputDirectory> -->
					<xmlOutput>true</xmlOutput>
					<threshold>Low</threshold>
					<effort>Max</effort>
					<findbugsXmlWithMessages>true</findbugsXmlWithMessages>
					<xmlOutputDirectory>target/findbugs</xmlOutputDirectory>
					<failOnError>false</failOnError>
					<excludeFilterFile>${main.basedir}/findbugs-exclude.xml</excludeFilterFile>
				</configuration>
				<executions>
					<execution>
						<phase>verify</phase>
						<goals>
							<goal>findbugs</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- FindBugs -->
			<!-- PMD -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${pmd.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>pmd</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- PMD -->
			<!-- jacoco -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.15</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. -->
					<excludes>
						<exclude>**/IT*.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.15</version>
				<executions>
					<!-- Ensures that both integration-test and verify goals of the Failsafe 
						Maven plugin are executed. -->
					<execution>
						<id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<!-- Sets the VM argument line used when integration tests are run. -->
							<argLine>${failsafeArgLine}</argLine>
							<!-- Skips integration tests if the value of skip.integration.tests 
								property is true -->
							<skipTests>${skip.integration.tests}</skipTests>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Failsafe plugin is executed. -->
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests after 
						integration tests have been run. -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- jacoco -->
		</plugins>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.5</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.7</version>
				<configuration>
					<linkXref>false</linkXref>
					<sourceEncoding>utf-8</sourceEncoding>
					<minimumTokens>100</minimumTokens>
					<targetJdk>1.8</targetJdk>
					<!-- <excludeRoots> <excludeRoot>target/</excludeRoot> </excludeRoots> -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.reports.version}</version>
				<reportSets>
					<reportSet><!-- aggregate reportSet, to define in poms having modules -->
						<id>aggregate</id>
						<inherited>false</inherited><!-- don't run aggregate in child modules -->
						<reports>
							<report>aggregate</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<reportSets>
					<reportSet>
						<reports>
							<!-- select non-aggregate reports -->
							<report>report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.fasterxml.jackson.module</groupId>
				<artifactId>jackson-module-parameter-names</artifactId>
			</dependency>
			<dependency>
				<groupId>com.lightbend.lagom</groupId>
				<artifactId>lagom-javadsl-server_2.11</artifactId>
				<version>${lagom.version}</version>
			</dependency>
			<dependency>
				<groupId>com.typesafe.play</groupId>
				<artifactId>play-netty-server_2.11</artifactId>
				<version>${play.version}</version>
			</dependency>
			<dependency>
				<groupId>com.lightbend.lagom</groupId>
				<artifactId>lagom-javadsl-api_2.11</artifactId>
				<version>${lagom.version}</version>
			</dependency>
			<dependency>
				<groupId>com.lightbend.lagom</groupId>
				<artifactId>lagom-javadsl-persistence-cassandra_2.11</artifactId>
				<version>${lagom.version}</version>
			</dependency>
			<dependency>
				<groupId>com.lightbend.lagom</groupId>
				<artifactId>lagom-logback_2.11</artifactId>
				<version>${lagom.version}</version>
			</dependency>
			<dependency>
				<groupId>com.lightbend.lagom</groupId>
				<artifactId>lagom-javadsl-testkit_2.11</artifactId>
				<version>${lagom.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.lightbend.lagom</groupId>
				<artifactId>lagom-javadsl-integration-client_2.11</artifactId>
				<version>${lagom.version}</version>
			</dependency>
			<dependency>
				<groupId>com.typesafe.conductr</groupId>
				<artifactId>${conductr.lib.name}</artifactId>
				<version>1.4.7</version>
			</dependency>
			<dependency>
				<groupId>com.typesafe.akka</groupId>
				<artifactId>akka-actor_2.11</artifactId>
				<version>${akka.version}</version>
			</dependency>
			<dependency>
				<groupId>com.typesafe.akka</groupId>
				<artifactId>akka-stream_2.11</artifactId>
				<version>${akka.version}</version>
			</dependency>
			<dependency>
				<groupId>org.immutables</groupId>
				<artifactId>value</artifactId>
				<version>2.4.3</version>
			</dependency>
			<dependency>
				<groupId>com.atlassian.oai</groupId>
				<artifactId>swagger-request-validator-core</artifactId>
				<version>1.0.11</version>
			</dependency>
			<dependency>
				<groupId>com.datastax.cassandra</groupId>
				<artifactId>cassandra-driver-core</artifactId>
				<version>3.0.7</version>
			</dependency>
			<dependency>
				<groupId>com.datastax.cassandra</groupId>
				<artifactId>cassandra-driver-mapping</artifactId>
				<version>3.0.7</version>
			</dependency>
			<dependency>
				<groupId>com.datastax.cassandra</groupId>
				<artifactId>cassandra-driver-extras</artifactId>
				<version>3.0.7</version>
			</dependency>
			<dependency>
				<groupId>ma.glasnost.orika</groupId>
				<artifactId>orika-core</artifactId>
				<version>1.4.6</version>
			</dependency>
			<dependency>
				<groupId>com.netflix.hystrix</groupId>
				<artifactId>hystrix-core</artifactId>
				<version>1.4.26</version>
			</dependency>
			<dependency>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${pmd.version}</version>
				<type>maven-plugin</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<main.basedir>${project.basedir}</main.basedir>
		<lagom.version>1.3.2</lagom.version>
		<play.version>2.5.10</play.version>
		<akka.version>2.4.16</akka.version>
		<checkstyle.version>2.17</checkstyle.version>
		<findbugd.version>3.0.1</findbugd.version>
		<pmd.version>3.7</pmd.version>
		<jacoco.version>0.7.9</jacoco.version>
		<jacoco.reports.version>0.7.9</jacoco.reports.version>
		<conductr.lib.name>lagom10-conductr-bundle-lib_2.11</conductr.lib.name>
	</properties>
</project>
